
import { FundEntityEnumItem, FundEntityGroup, FundEntity, FundEntityEnum} from './fund.entity.model';

/**
 * CacheKey is the key used by FndEntityCache to store the (filter, fund entity group) under a map.
 */
class CacheKey {
    constructor(public readonly filter: string, public readonly type: FundEntityEnumItem) {
    }

    public matches(filter: string, type: FundEntityEnumItem): number {
        if (type === this.type) {
            if (this.filter.indexOf(filter) === 0) {
                return filter.length - this.filter.length;
            }
        }
        return -1;
    }
}

/**
 * FundEntityCache is a cache for the FundEntityComponent. It is an in memory storage for (filter, fund entity group) pairs.
 */
export class FundEntityCache {

    private cache = new Map<CacheKey, FundEntityGroup>();

    /**
     * Get cached fund entity group for a given filter. This method may return a group for a filter that is close to the given one
     * if and only if the data contained into that group have not been truncated. A filter A is close to a filter B if A is a substring
     * of B and with the biggest number of characters compared to all the other filters contained in this cache.
     * @param filter Non-null filter.
     * @param type Non-null fund entity type.
     */
    public get(filter: string, type: FundEntityEnumItem): FundEntityGroup {
        const normalizedFilter = this.normalizeFilter(filter);
        let candidateMatchRslt = -1; let candidateFundEntityGroup: FundEntityGroup;
        let matchRslt = 0;

        for (let entry of this.cache) {
            matchRslt = entry[0].matches(normalizedFilter, type);
            if (matchRslt>-1) {
                if (matchRslt === 0) {
                    // Case : exact match
                    // Action : directly return the cached value. This is done by setting a high value for the candidateMatchRslt
                    return entry[1];
                } else if (matchRslt < candidateMatchRslt) {
                    // Case : the iterated filter is much closer (in the number of characters) to the candidate filter
                    // Action : make the iterated value the new candidate result
                    candidateMatchRslt = matchRslt;
                    candidateFundEntityGroup = entry[1];
                } else if (matchRslt === candidateMatchRslt) {
                    if ((!entry[1].isTruncated) && candidateFundEntityGroup.isTruncated) {
                        // Case : the iterated filter contains the same number of characters than the candidate result one and the iterated one has a value that is not truncated
                        // Action : since the iterated value is not truncated, prefer that one over the candidated result
                        candidateFundEntityGroup = entry[1];
                    }
                }
            }
        }

        return (candidateFundEntityGroup && !candidateFundEntityGroup.isTruncated) ? candidateFundEntityGroup : null;
    }

    /**
     * Insert a given fund entity group into this cache under a given filter key.
     * @param filter Non-null filter used as cache key.
     * @param fundEntities Non-null fund entity group to cache.
     */
    public put(filter: string, fundEntities: FundEntityGroup) {
        const key = new CacheKey(this.normalizeFilter(filter), FundEntityEnum.toEnum(fundEntities.type));
        this.cache.set(key, fundEntities);
    }

    /**
     * Clear this cache.
     */
    public clear() {
        this.cache.clear;
    }

    /**
     * Normalize a given filter. In this case the normalization consists to making the filter lower case.
     * @param filter Non-null filter.
     */
    private normalizeFilter(filter: string): string {
        return filter.toLowerCase();
    }
}
